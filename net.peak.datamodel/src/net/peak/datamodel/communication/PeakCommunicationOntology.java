// file: PeakCommunicationOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package net.peak.datamodel.communication;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: PeakCommunicationOntology.java
 * @author ontology bean generator
 * @version 2023/02/15, 13:50:06
 */
public class PeakCommunicationOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "PeakCommunication";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new PeakCommunicationOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String PUTLVRSETPOINTS_LVRSETPOINTS="lvrSetpoints";
    public static final String PUTLVRSETPOINTS="PutLvrSetpoints";
    public static final String PUTALLHARDWARESETPOINTS_LOADBANKSETPOINTSLIST="loadbankSetpointsList";
    public static final String PUTALLHARDWARESETPOINTS_INVERTERSETPOINTSLIST="inverterSetpointsList";
    public static final String PUTALLHARDWARESETPOINTS="PutAllHardwareSetpoints";
    public static final String PUTLOADBANKSETPOINTS_LOADBANKSETPOINTS="loadbankSetpoints";
    public static final String PUTLOADBANKSETPOINTS="PutLoadbankSetpoints";
    public static final String PUTINVERTERSETPOINTS_INVERTERSETPOINTS="inverterSetpoints";
    public static final String PUTINVERTERSETPOINTS="PutInverterSetpoints";
    public static final String PLATTFORMTOSGL="PlattformToSgl";
    public static final String PUTACTUATORSETPOINT_ACTUATORSETPOINT="actuatorSetpoint";
    public static final String PUTACTUATORSETPOINT="PutActuatorSetpoint";
    public static final String PUTACTUATORFEEDBACK_ACTUATORFEEDBACK="actuatorFeedback";
    public static final String PUTACTUATORFEEDBACK="PutActuatorFeedback";
    public static final String GRIDTOPROSUMER="GridToProsumer";
    public static final String PUTTRAFFICLIGHTFORECASTPLATFORM_GRIDTRAFFICLIGHTFORECAST="gridTrafficLightForecast";
    public static final String PUTTRAFFICLIGHTFORECASTPLATFORM="PutTrafficLightForecastPlatform";
    public static final String PUTTRAFFICLIGHTREALTIMEPLATFORM_GRIDTRAFFICLIGHTREALTIME="gridTrafficLightRealTime";
    public static final String PUTTRAFFICLIGHTREALTIMEPLATFORM="PutTrafficLightRealTimePlatform";
    public static final String PUTFORECASTSCHEDULE_FORECASTSCHEDULETABLE="forecastScheduleTable";
    public static final String PUTFORECASTSCHEDULE="PutForecastSchedule";
    public static final String GRIDTOPLATFORM="GridToPlatform";
    public static final String PEAKMEMBERREQUEST_FORECASTSCHEDULE="forecastSchedule";
    public static final String PEAKMEMBERREQUEST="PeakMemberRequest";
    public static final String PEAKMEMBERANSWER_FORECASTSCHEDULE="forecastSchedule";
    public static final String PEAKMEMBERANSWER="PeakMemberAnswer";
    public static final String PEAKMEMBERREGISTRATION_PEAKMEMBER="peakMember";
    public static final String PEAKMEMBERREGISTRATION="PeakMemberRegistration";
    public static final String PEAKMEMBERINTERACTION="PeakMemberInteraction";
    public static final String PEAKPLATFORMINTERACTION="PeakPlatformInteraction";
    public static final String PUTTRAFFICLIGHTFORECASTMARKET_GRIDTRAFFICLIGHTFORECAST="gridTrafficLightForecast";
    public static final String PUTTRAFFICLIGHTFORECASTMARKET="PutTrafficLightForecastMarket";
    public static final String PUTTRAFFICLIGHTREALTIMEMARKET_GRIDTRAFFICLIGHTREALTIME="gridTrafficLightRealTime";
    public static final String PUTTRAFFICLIGHTREALTIMEMARKET="PutTrafficLightRealTimeMarket";
    public static final String PUTMARKETRESULT_GRIDMARKETRESULT="gridMarketResult";
    public static final String PUTMARKETRESULT="PutMarketResult";
    public static final String PUTFLEXIBILITYTABLEREQUEST_GRIDMARKETREQUEST="gridMarketRequest";
    public static final String PUTFLEXIBILITYTABLEREQUEST="PutFlexibilityTableRequest";
    public static final String GRIDTOMARKET="GridToMarket";
    public static final String PUTRESIDUALPROCUREMENTRESULT_RESIDUALRESULT="residualResult";
    public static final String PUTRESIDUALPROCUREMENTRESULT="PutResidualProcurementResult";
    public static final String PUTENERGYRESULT_ENERGYRESULT="energyResult";
    public static final String PUTENERGYRESULT="PutEnergyResult";
    public static final String PUTFLEXIBILITYRESULT_FLEXIBILITYRESULT="flexibilityResult";
    public static final String PUTFLEXIBILITYRESULT="PutFlexibilityResult";
    public static final String PUTTRADINGRESULT="PutTradingResult";
    public static final String PUTFLEXIBILITYREQUEST_FLEXIBILITYREQUEST="flexibilityRequest";
    public static final String PUTFLEXIBILITYREQUEST="PutFlexibilityRequest";
    public static final String PUTFLEXIBILITYTRANSACTION_FLEXIBILITYTRANSACTION="flexibilityTransaction";
    public static final String PUTFLEXIBILITYTRANSACTION="PutFlexibilityTransaction";
    public static final String PUTENERGYTRANSACTION_ENERGYTRANSACTION="energyTransaction";
    public static final String PUTENERGYTRANSACTION="PutEnergyTransaction";
    public static final String PUTTRADINGTRANSACTION="PutTradingTransaction";
    public static final String PUTORDERBOOK_ORDERBOOK="orderBook";
    public static final String PUTORDERBOOK="PutOrderBook";
    public static final String GETORDERBOOKREQUEST_ORDERBOOKREQUEST="orderBookRequest";
    public static final String GETORDERBOOKREQUEST="GetOrderBookRequest";
    public static final String PROSUMERTOMARKET="ProsumerToMarket";
    public static final String MATLABAPICONFIGURATION_UPDATEPOWERFORECASTSERVERURL="updatePowerForecastServerURL";
    public static final String MATLABAPICONFIGURATION_GRIDSTATEFORECASTSERVERURL="gridStateForecastServerURL";
    public static final String MATLABAPICONFIGURATION="MatlabApiConfiguration";
    public static final String TRAFFICLIGHT_COLOR="color";
    public static final String TRAFFICLIGHT="TrafficLight";
    public static final String GRIDPLATFORMINTERACTION_TRAFFICLIGHT="trafficLight";
    public static final String GRIDPLATFORMINTERACTION="GridPlatformInteraction";
    public static final String GRIDMARKETREQUEST_MAXIMUMPURCHASEPRICE="maximumPurchasePrice";
    public static final String GRIDMARKETREQUEST="GridMarketRequest";
    public static final String MARKETPROSUMERRESULT="MarketProsumerResult";
    public static final String PROSUMERMARKETTRANSACTION_ENERGYLABEL="energyLabel";
    public static final String PROSUMERMARKETTRANSACTION="ProsumerMarketTransaction";
    public static final String TIMESERIES_TIMESERIESVALUELIST="timeSeriesValueList";
    public static final String TIMESERIES="TimeSeries";
    public static final String PROSUMERMARKETINTERACTION_TRANSACTIONPRICE="transactionPrice";
    public static final String PROSUMERMARKETINTERACTION_PEAKMEMBERID="peakMemberID";
    public static final String PROSUMERMARKETINTERACTION_LOCALTRANSACTIONID="localTransactionID";
    public static final String PROSUMERMARKETINTERACTION_TIMESLOTSTART="timeSlotStart";
    public static final String PROSUMERMARKETINTERACTION_LISTHISTORICALTRADES= "listHistoricalTrades";
    public static final String PROSUMERMARKETINTERACTION="ProsumerMarketInteraction";
    public static final String PROSUMERMARKETINTERACTION_INITIALENERGYAMOUNTOFFERED= "initialEnergyAmountOffered";
    public static final String PROSUMERMARKETINTERACTION_INITIALENERGYAMOUNTASKED= "initialEnergyAmountAsked";
    public static final String PROSUMERMARKETINTERACTION_INITIALTRANSACTIONPRICEOFFERED= "initialTransactionPriceOffered";
    public static final String PROSUMERMARKETINTERACTION_INITIALTRANSACTIONPRICEASKED= "initialTransactionPriceAsked";
    public static final String PROSUMERMARKETINTERACTION_TRADETYPESTRING= "tradeTypeString";
    public static final String PROSUMERMARKETINTERACTION_ITERATION= "iteration";
    public static final String UNITVALUEINTEGER_INTVALUE="intValue";
    public static final String UNITVALUEINTEGER="UnitValueInteger";
    public static final String TIMESERIESINTEGER="TimeSeriesInteger";
    public static final String UNITVALUEFLOAT_FLOATVALUE="floatValue";
    public static final String UNITVALUEFLOAT="UnitValueFloat";
    public static final String TIMESERIESVALUEFLOAT="TimeSeriesValueFloat";
    public static final String ENERGYAMOUNT="EnergyAmount";
    public static final String FLEXIBILITYTRANSACTION_POWERFLOW="powerFlow";
    public static final String FLEXIBILITYTRANSACTION_CALCULATIONCOMPLETE="calculationComplete";
    public static final String FLEXIBILITYTRANSACTION="FlexibilityTransaction";
    public static final String ORDERBOOKREQUEST_TIMESLOTSTART="timeSlotStart";
    public static final String ORDERBOOKREQUEST="OrderBookRequest";
    public static final String INVERTERSETPOINTS_UUID="uuid";
    public static final String INVERTERSETPOINTS_SETPOINTS123="setpointS123";
    public static final String INVERTERSETPOINTS_SETPOINTPF123="setpointPf123";
    public static final String INVERTERSETPOINTS="InverterSetpoints";
    public static final String POWERFACTORSETPOINTTRIPHASEACL_VALUE="value";
    public static final String POWERFACTORSETPOINTTRIPHASEACL_TIMESTAMP="timeStamp";
    public static final String POWERFACTORSETPOINTTRIPHASEACL="PowerFactorSetpointTriPhaseAcl";
    public static final String UNITVALUE_UNIT="unit";
    public static final String UNITVALUE="UnitValue";
    public static final String ACTUATORFEEDBACK_REPORTEDSETPOINT="reportedSetpoint";
    public static final String ACTUATORFEEDBACK_REPORTEDACTIVEPOWER="reportedActivePower";
    public static final String ACTUATORFEEDBACK_MAXACTIVEPOWERDEMAND="maxActivePowerDemand";
    public static final String ACTUATORFEEDBACK_TIMESTAMP="timeStamp";
    public static final String ACTUATORFEEDBACK_MAXACTIVEPOWERFEEDIN="maxActivePowerFeedIn";
    public static final String ACTUATORFEEDBACK="ActuatorFeedback";
    public static final String LONGVALUE_LONGASSTRING="longAsString";
    public static final String LONGVALUE="LongValue";
    public static final String PEAKMEMBER_GRIDID="gridID";
    public static final String PEAKMEMBER_PEAKUSERID="peakUserID";
    public static final String PEAKMEMBER_NODEID="nodeID";
    public static final String PEAKMEMBER_PEAKMEMBERID="peakMemberID";
    public static final String PEAKMEMBER_PEAKAGENTID="peakAgentID";
    public static final String PEAKMEMBER_LOCATION="location";
    public static final String PEAKMEMBER="PeakMember";
    public static final String FORECASTSCHEDULE_TIMESERIES="timeSeries";
    public static final String FORECASTSCHEDULE="ForecastSchedule";
    public static final String LOADBANKSETPOINTS_UUID="uuid";
    public static final String LOADBANKSETPOINTS_SETPOINTP1="setpointP1";
    public static final String LOADBANKSETPOINTS_SETPOINTP3="setpointP3";
    public static final String LOADBANKSETPOINTS_SETPOINTP2="setpointP2";
    public static final String LOADBANKSETPOINTS="LoadbankSetpoints";
    public static final String ENERGYLABEL_LABEL="label";
    public static final String ENERGYLABEL="EnergyLabel";
    public static final String POWERADJUSTMENT_ADJUSTMENT="adjustment";
    public static final String POWERADJUSTMENT_NODEID="nodeID";
    public static final String POWERADJUSTMENT="PowerAdjustment";
    public static final String GRIDTRAFFICLIGHTREALTIME="GridTrafficLightRealTime";
    public static final String GRIDMARKETINTERACTION_POWERADJUSTMENT="powerAdjustment";
    public static final String GRIDMARKETINTERACTION_TIMESLOTSTART="timeSlotStart";
    public static final String GRIDMARKETINTERACTION="GridMarketInteraction";
    public static final String GRIDTRAFFICLIGHTFORECAST_TIMESLOTSTART="timeSlotStart";
    public static final String GRIDTRAFFICLIGHTFORECAST="GridTrafficLightForecast";
    public static final String RESIDUALRESULT_DELIVEREDENERGY="deliveredEnergy";
    public static final String RESIDUALRESULT="ResidualResult";
    public static final String POWERFLOW="PowerFlow";
    public static final String ENERGYTRANSACTION_ENERGYAMOUNT="energyAmount";
    public static final String ENERGYTRANSACTION="EnergyTransaction";
    public static final String ACTUATORSETPOINT_SETPOINT="setpoint";
    public static final String ACTUATORSETPOINT_TIMESTAMP="timeStamp";
    public static final String ACTUATORSETPOINT="ActuatorSetpoint";
    public static final String APPARENTPOWERSETPOINTTRIPHASEACL_VALUE="value";
    public static final String APPARENTPOWERSETPOINTTRIPHASEACL_TIMESTAMP="timeStamp";
    public static final String APPARENTPOWERSETPOINTTRIPHASEACL="ApparentPowerSetpointTriPhaseAcl";
    public static final String GRIDMARKETRESULT_PURCHASEPRICE="purchasePrice";
    public static final String GRIDMARKETRESULT="GridMarketResult";
    public static final String FLEXIBILITYREQUEST_POWERADJUSTMENTINDIVIDUAL="powerAdjustmentIndividual";
    public static final String FLEXIBILITYREQUEST_TIMESLOTSTART="timeSlotStart";
    public static final String FLEXIBILITYREQUEST="FlexibilityRequest";
    public static final String ACTIVEPOWERSETPOINTSINGLEPHASEACL_VALUE="value";
    public static final String ACTIVEPOWERSETPOINTSINGLEPHASEACL_TIMESTAMP="timeStamp";
    public static final String ACTIVEPOWERSETPOINTSINGLEPHASEACL="ActivePowerSetpointSinglePhaseAcl";
    public static final String ORDERBOOK_MINASKPRICE="minAskPrice";
    public static final String ORDERBOOK_SUMASKAMOUNT="sumAskAmount";
    public static final String ORDERBOOK_CHANGEDDATE="changedDate";
    public static final String ORDERBOOK_TIMESLOTSTART="timeSlotStart";
    public static final String ORDERBOOK_CREATEDDATE="createdDate";
    public static final String ORDERBOOK_MAXASKPRICE="maxAskPrice";
    public static final String ORDERBOOK_AVGASKPRICE="avgAskPrice";
    public static final String ORDERBOOK_QUARTERHOURSTATUS="quarterHourStatus";
    public static final String ORDERBOOK_COUNTERBID="counterBid";
    public static final String ORDERBOOK_AVGBIDPRICE="avgBidPrice";
    public static final String ORDERBOOK_SUMBIDAMOUNT="sumBidAmount";
    public static final String ORDERBOOK_COUNTERASK="counterAsk";
    public static final String ORDERBOOK_MINBIDPRICE="minBidPrice";
    public static final String ORDERBOOK="OrderBook";
    public static final String ENERGYRESULT_DELIVEREDENERGY="deliveredEnergy";
    public static final String ENERGYRESULT="EnergyResult";
    public static final String FLEXIBILITYRESULT_POWERADJUSTMENTINDIVIDUAL="powerAdjustmentIndividual";
    public static final String FLEXIBILITYRESULT="FlexibilityResult";
    public static final String TIMESERIESVALUE_UNITVALUE="unitValue";
    public static final String TIMESERIESVALUE_TIMESTAMP="timeStamp";
    public static final String TIMESERIESVALUE="TimeSeriesValue";
    public static final String LOCATION_LATITUDE="latitude";
    public static final String LOCATION_LONGITUDE="longitude";
    public static final String LOCATION="Location";
    public static final String LVRSETPOINTS_REACTIONTIME="ReactionTime";
    public static final String LVRSETPOINTS_L1STEPDOWN="L1StepDown";
    public static final String LVRSETPOINTS_VSETPOINT="VSetpoint";
    public static final String LVRSETPOINTS_IMPEDANCE="Impedance";
    public static final String LVRSETPOINTS_L3STEPDOWN="L3StepDown";
    public static final String LVRSETPOINTS_TOLERANCEUPPER="ToleranceUpper";
    public static final String LVRSETPOINTS_L2STEPDOWN="L2StepDown";
    public static final String LVRSETPOINTS_MODE="Mode";
    public static final String LVRSETPOINTS_ALLSTEPDOWN="AllStepDown";
    public static final String LVRSETPOINTS_L2STEPUP="L2StepUp";
    public static final String LVRSETPOINTS_L3STEPUP="L3StepUp";
    public static final String LVRSETPOINTS_L1STEPUP="L1StepUp";
    public static final String LVRSETPOINTS_TOLERANCELOWER="ToleranceLower";
    public static final String LVRSETPOINTS_ALLSTEPUP="AllStepUp";
    public static final String LVRSETPOINTS="LvrSetpoints";
    public static final String PLATTFORMSGLINTERACTION="PlattformSglInteraction";
    public static final String ASKINGAGENT="AskingAgent";
    public static final String OFFERINGAGENT="OfferingAgent";
    public static final String AGENTASKEDENERGY="AgentAskedEnergy";
    public static final String AGENTOFFEREDENERGY="AgentOfferedEnergy";
    public static final String PROSUMERMARKETINTERACTION_ENERGYTRANSACTION = "energyTransaction";
    public static final String PROSUMERMARKETINTERACTION_ENERGYAMOUNTFLOAT = "energyAmountFloat";
    public static final String ENERGYRESULT_ENERGYAMOUNTASKED = "energyAmountAsked";
    public static final String ENERGYRESULT_ENERGYPRICEMATCHED = "energyPriceMatched";
    public static final String ENERGYRESULT_INITALTRANSACTIONPRICEASKED = "initalTransactionPriceAsked";
    public static final String ENERGYRESULT_ACTUALPERIOD = "actualPeriod";
    public static final String ENERGYRESULT_ACTUALTRADINGCYCLE = "actualTradingCycle";
    public static final String ENERGYRESULT_OPENENERGYAMOUNTOFFER = "openEnergyAmountOffer";
    public static final String ENERGYRESULT_OPENENERGYAMOUNTASKED = "openEnergyAmountAsked";

  /**
   * Constructor
  */
  private PeakCommunicationOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema plattformSglInteractionSchema = new ConceptSchema(PLATTFORMSGLINTERACTION);
    add(plattformSglInteractionSchema, net.peak.datamodel.communication.PlattformSglInteraction.class);
    ConceptSchema lvrSetpointsSchema = new ConceptSchema(LVRSETPOINTS);
    add(lvrSetpointsSchema, net.peak.datamodel.communication.LvrSetpoints.class);
    ConceptSchema locationSchema = new ConceptSchema(LOCATION);
    add(locationSchema, net.peak.datamodel.communication.Location.class);
    ConceptSchema timeSeriesValueSchema = new ConceptSchema(TIMESERIESVALUE);
    add(timeSeriesValueSchema, net.peak.datamodel.communication.TimeSeriesValue.class);
    ConceptSchema flexibilityResultSchema = new ConceptSchema(FLEXIBILITYRESULT);
    add(flexibilityResultSchema, net.peak.datamodel.communication.FlexibilityResult.class);
    ConceptSchema energyResultSchema = new ConceptSchema(ENERGYRESULT);
    add(energyResultSchema, net.peak.datamodel.communication.EnergyResult.class);
    ConceptSchema orderBookSchema = new ConceptSchema(ORDERBOOK);
    add(orderBookSchema, net.peak.datamodel.communication.OrderBook.class);
    ConceptSchema activePowerSetpointSinglePhaseAclSchema = new ConceptSchema(ACTIVEPOWERSETPOINTSINGLEPHASEACL);
    add(activePowerSetpointSinglePhaseAclSchema, net.peak.datamodel.communication.ActivePowerSetpointSinglePhaseAcl.class);
    ConceptSchema flexibilityRequestSchema = new ConceptSchema(FLEXIBILITYREQUEST);
    add(flexibilityRequestSchema, net.peak.datamodel.communication.FlexibilityRequest.class);
    ConceptSchema gridMarketResultSchema = new ConceptSchema(GRIDMARKETRESULT);
    add(gridMarketResultSchema, net.peak.datamodel.communication.GridMarketResult.class);
    ConceptSchema apparentPowerSetpointTriPhaseAclSchema = new ConceptSchema(APPARENTPOWERSETPOINTTRIPHASEACL);
    add(apparentPowerSetpointTriPhaseAclSchema, net.peak.datamodel.communication.ApparentPowerSetpointTriPhaseAcl.class);
    ConceptSchema actuatorSetpointSchema = new ConceptSchema(ACTUATORSETPOINT);
    add(actuatorSetpointSchema, net.peak.datamodel.communication.ActuatorSetpoint.class);
    ConceptSchema energyTransactionSchema = new ConceptSchema(ENERGYTRANSACTION);
    add(energyTransactionSchema, net.peak.datamodel.communication.EnergyTransaction.class);
    ConceptSchema powerFlowSchema = new ConceptSchema(POWERFLOW);
    add(powerFlowSchema, net.peak.datamodel.communication.PowerFlow.class);
    ConceptSchema residualResultSchema = new ConceptSchema(RESIDUALRESULT);
    add(residualResultSchema, net.peak.datamodel.communication.ResidualResult.class);
    ConceptSchema gridTrafficLightForecastSchema = new ConceptSchema(GRIDTRAFFICLIGHTFORECAST);
    add(gridTrafficLightForecastSchema, net.peak.datamodel.communication.GridTrafficLightForecast.class);
    ConceptSchema gridMarketInteractionSchema = new ConceptSchema(GRIDMARKETINTERACTION);
    add(gridMarketInteractionSchema, net.peak.datamodel.communication.GridMarketInteraction.class);
    ConceptSchema gridTrafficLightRealTimeSchema = new ConceptSchema(GRIDTRAFFICLIGHTREALTIME);
    add(gridTrafficLightRealTimeSchema, net.peak.datamodel.communication.GridTrafficLightRealTime.class);
    
    ConceptSchema powerAdjustmentSchema = new ConceptSchema(POWERADJUSTMENT);
    add(powerAdjustmentSchema, net.peak.datamodel.communication.PowerAdjustment.class);
    
    ConceptSchema energyLabelSchema = new ConceptSchema(ENERGYLABEL);
    add(energyLabelSchema, net.peak.datamodel.communication.EnergyLabel.class);
    ConceptSchema loadbankSetpointsSchema = new ConceptSchema(LOADBANKSETPOINTS);
    add(loadbankSetpointsSchema, net.peak.datamodel.communication.LoadbankSetpoints.class);
    ConceptSchema forecastScheduleSchema = new ConceptSchema(FORECASTSCHEDULE);
    add(forecastScheduleSchema, net.peak.datamodel.communication.ForecastSchedule.class);
    ConceptSchema peakMemberSchema = new ConceptSchema(PEAKMEMBER);
    add(peakMemberSchema, net.peak.datamodel.communication.PeakMember.class);
    ConceptSchema longValueSchema = new ConceptSchema(LONGVALUE);
    add(longValueSchema, net.peak.datamodel.communication.LongValue.class);
    ConceptSchema actuatorFeedbackSchema = new ConceptSchema(ACTUATORFEEDBACK);
    add(actuatorFeedbackSchema, net.peak.datamodel.communication.ActuatorFeedback.class);
    ConceptSchema unitValueSchema = new ConceptSchema(UNITVALUE);
    add(unitValueSchema, net.peak.datamodel.communication.UnitValue.class);
    ConceptSchema powerFactorSetpointTriPhaseAclSchema = new ConceptSchema(POWERFACTORSETPOINTTRIPHASEACL);
    add(powerFactorSetpointTriPhaseAclSchema, net.peak.datamodel.communication.PowerFactorSetpointTriPhaseAcl.class);
    ConceptSchema inverterSetpointsSchema = new ConceptSchema(INVERTERSETPOINTS);
    add(inverterSetpointsSchema, net.peak.datamodel.communication.InverterSetpoints.class);
    ConceptSchema orderBookRequestSchema = new ConceptSchema(ORDERBOOKREQUEST);
    add(orderBookRequestSchema, net.peak.datamodel.communication.OrderBookRequest.class);
    ConceptSchema flexibilityTransactionSchema = new ConceptSchema(FLEXIBILITYTRANSACTION);
    add(flexibilityTransactionSchema, net.peak.datamodel.communication.FlexibilityTransaction.class);
    ConceptSchema energyAmountSchema = new ConceptSchema(ENERGYAMOUNT);
    add(energyAmountSchema, net.peak.datamodel.communication.EnergyAmount.class);
    ConceptSchema timeSeriesValueFloatSchema = new ConceptSchema(TIMESERIESVALUEFLOAT);
    add(timeSeriesValueFloatSchema, net.peak.datamodel.communication.TimeSeriesValueFloat.class);
    ConceptSchema unitValueFloatSchema = new ConceptSchema(UNITVALUEFLOAT);
    add(unitValueFloatSchema, net.peak.datamodel.communication.UnitValueFloat.class);
    ConceptSchema timeSeriesIntegerSchema = new ConceptSchema(TIMESERIESINTEGER);
    add(timeSeriesIntegerSchema, net.peak.datamodel.communication.TimeSeriesInteger.class);
    ConceptSchema unitValueIntegerSchema = new ConceptSchema(UNITVALUEINTEGER);
    add(unitValueIntegerSchema, net.peak.datamodel.communication.UnitValueInteger.class);
    
    ConceptSchema prosumerMarketInteractionSchema = new ConceptSchema(PROSUMERMARKETINTERACTION);
    add(prosumerMarketInteractionSchema, net.peak.datamodel.communication.ProsumerMarketInteraction.class);
    
    ConceptSchema timeSeriesSchema = new ConceptSchema(TIMESERIES);
    add(timeSeriesSchema, net.peak.datamodel.communication.TimeSeries.class);
    ConceptSchema prosumerMarketTransactionSchema = new ConceptSchema(PROSUMERMARKETTRANSACTION);
    add(prosumerMarketTransactionSchema, net.peak.datamodel.communication.ProsumerMarketTransaction.class);
    ConceptSchema marketProsumerResultSchema = new ConceptSchema(MARKETPROSUMERRESULT);
    add(marketProsumerResultSchema, net.peak.datamodel.communication.MarketProsumerResult.class);
    ConceptSchema gridMarketRequestSchema = new ConceptSchema(GRIDMARKETREQUEST);
    add(gridMarketRequestSchema, net.peak.datamodel.communication.GridMarketRequest.class);
    ConceptSchema gridPlatformInteractionSchema = new ConceptSchema(GRIDPLATFORMINTERACTION);
    add(gridPlatformInteractionSchema, net.peak.datamodel.communication.GridPlatformInteraction.class);
    ConceptSchema trafficLightSchema = new ConceptSchema(TRAFFICLIGHT);
    add(trafficLightSchema, net.peak.datamodel.communication.TrafficLight.class);
    ConceptSchema matlabApiConfigurationSchema = new ConceptSchema(MATLABAPICONFIGURATION);
    add(matlabApiConfigurationSchema, net.peak.datamodel.communication.MatlabApiConfiguration.class);

    // adding AgentAction(s)
    AgentActionSchema prosumerToMarketSchema = new AgentActionSchema(PROSUMERTOMARKET);
    add(prosumerToMarketSchema, net.peak.datamodel.communication.ProsumerToMarket.class);
    AgentActionSchema getOrderBookRequestSchema = new AgentActionSchema(GETORDERBOOKREQUEST);
    add(getOrderBookRequestSchema, net.peak.datamodel.communication.GetOrderBookRequest.class);
    AgentActionSchema putOrderBookSchema = new AgentActionSchema(PUTORDERBOOK);
    add(putOrderBookSchema, net.peak.datamodel.communication.PutOrderBook.class);
    AgentActionSchema putTradingTransactionSchema = new AgentActionSchema(PUTTRADINGTRANSACTION);
    add(putTradingTransactionSchema, net.peak.datamodel.communication.PutTradingTransaction.class);
    AgentActionSchema putEnergyTransactionSchema = new AgentActionSchema(PUTENERGYTRANSACTION);
    add(putEnergyTransactionSchema, net.peak.datamodel.communication.PutEnergyTransaction.class);
    AgentActionSchema putFlexibilityTransactionSchema = new AgentActionSchema(PUTFLEXIBILITYTRANSACTION);
    add(putFlexibilityTransactionSchema, net.peak.datamodel.communication.PutFlexibilityTransaction.class);
    AgentActionSchema putFlexibilityRequestSchema = new AgentActionSchema(PUTFLEXIBILITYREQUEST);
    add(putFlexibilityRequestSchema, net.peak.datamodel.communication.PutFlexibilityRequest.class);
    AgentActionSchema putTradingResultSchema = new AgentActionSchema(PUTTRADINGRESULT);
    add(putTradingResultSchema, net.peak.datamodel.communication.PutTradingResult.class);
    AgentActionSchema putFlexibilityResultSchema = new AgentActionSchema(PUTFLEXIBILITYRESULT);
    add(putFlexibilityResultSchema, net.peak.datamodel.communication.PutFlexibilityResult.class);
    AgentActionSchema putEnergyResultSchema = new AgentActionSchema(PUTENERGYRESULT);
    add(putEnergyResultSchema, net.peak.datamodel.communication.PutEnergyResult.class);
    AgentActionSchema putResidualProcurementResultSchema = new AgentActionSchema(PUTRESIDUALPROCUREMENTRESULT);
    add(putResidualProcurementResultSchema, net.peak.datamodel.communication.PutResidualProcurementResult.class);
    AgentActionSchema gridToMarketSchema = new AgentActionSchema(GRIDTOMARKET);
    add(gridToMarketSchema, net.peak.datamodel.communication.GridToMarket.class);
    AgentActionSchema putFlexibilityTableRequestSchema = new AgentActionSchema(PUTFLEXIBILITYTABLEREQUEST);
    add(putFlexibilityTableRequestSchema, net.peak.datamodel.communication.PutFlexibilityTableRequest.class);
    AgentActionSchema putMarketResultSchema = new AgentActionSchema(PUTMARKETRESULT);
    add(putMarketResultSchema, net.peak.datamodel.communication.PutMarketResult.class);
    AgentActionSchema putTrafficLightRealTimeMarketSchema = new AgentActionSchema(PUTTRAFFICLIGHTREALTIMEMARKET);
    add(putTrafficLightRealTimeMarketSchema, net.peak.datamodel.communication.PutTrafficLightRealTimeMarket.class);
    AgentActionSchema putTrafficLightForecastMarketSchema = new AgentActionSchema(PUTTRAFFICLIGHTFORECASTMARKET);
    add(putTrafficLightForecastMarketSchema, net.peak.datamodel.communication.PutTrafficLightForecastMarket.class);
    AgentActionSchema peakPlatformInteractionSchema = new AgentActionSchema(PEAKPLATFORMINTERACTION);
    add(peakPlatformInteractionSchema, net.peak.datamodel.communication.PeakPlatformInteraction.class);
    AgentActionSchema peakMemberInteractionSchema = new AgentActionSchema(PEAKMEMBERINTERACTION);
    add(peakMemberInteractionSchema, net.peak.datamodel.communication.PeakMemberInteraction.class);
    AgentActionSchema peakMemberRegistrationSchema = new AgentActionSchema(PEAKMEMBERREGISTRATION);
    add(peakMemberRegistrationSchema, net.peak.datamodel.communication.PeakMemberRegistration.class);
    AgentActionSchema peakMemberAnswerSchema = new AgentActionSchema(PEAKMEMBERANSWER);
    add(peakMemberAnswerSchema, net.peak.datamodel.communication.PeakMemberAnswer.class);
    AgentActionSchema peakMemberRequestSchema = new AgentActionSchema(PEAKMEMBERREQUEST);
    add(peakMemberRequestSchema, net.peak.datamodel.communication.PeakMemberRequest.class);
    AgentActionSchema gridToPlatformSchema = new AgentActionSchema(GRIDTOPLATFORM);
    add(gridToPlatformSchema, net.peak.datamodel.communication.GridToPlatform.class);
    AgentActionSchema putForecastScheduleSchema = new AgentActionSchema(PUTFORECASTSCHEDULE);
    add(putForecastScheduleSchema, net.peak.datamodel.communication.PutForecastSchedule.class);
    AgentActionSchema putTrafficLightRealTimePlatformSchema = new AgentActionSchema(PUTTRAFFICLIGHTREALTIMEPLATFORM);
    add(putTrafficLightRealTimePlatformSchema, net.peak.datamodel.communication.PutTrafficLightRealTimePlatform.class);
    AgentActionSchema putTrafficLightForecastPlatformSchema = new AgentActionSchema(PUTTRAFFICLIGHTFORECASTPLATFORM);
    add(putTrafficLightForecastPlatformSchema, net.peak.datamodel.communication.PutTrafficLightForecastPlatform.class);
    AgentActionSchema gridToProsumerSchema = new AgentActionSchema(GRIDTOPROSUMER);
    add(gridToProsumerSchema, net.peak.datamodel.communication.GridToProsumer.class);
    AgentActionSchema putActuatorFeedbackSchema = new AgentActionSchema(PUTACTUATORFEEDBACK);
    add(putActuatorFeedbackSchema, net.peak.datamodel.communication.PutActuatorFeedback.class);
    AgentActionSchema putActuatorSetpointSchema = new AgentActionSchema(PUTACTUATORSETPOINT);
    add(putActuatorSetpointSchema, net.peak.datamodel.communication.PutActuatorSetpoint.class);
    AgentActionSchema plattformToSglSchema = new AgentActionSchema(PLATTFORMTOSGL);
    add(plattformToSglSchema, net.peak.datamodel.communication.PlattformToSgl.class);
    AgentActionSchema putInverterSetpointsSchema = new AgentActionSchema(PUTINVERTERSETPOINTS);
    add(putInverterSetpointsSchema, net.peak.datamodel.communication.PutInverterSetpoints.class);
    AgentActionSchema putLoadbankSetpointsSchema = new AgentActionSchema(PUTLOADBANKSETPOINTS);
    add(putLoadbankSetpointsSchema, net.peak.datamodel.communication.PutLoadbankSetpoints.class);
    AgentActionSchema putAllHardwareSetpointsSchema = new AgentActionSchema(PUTALLHARDWARESETPOINTS);
    add(putAllHardwareSetpointsSchema, net.peak.datamodel.communication.PutAllHardwareSetpoints.class);
    AgentActionSchema putLvrSetpointsSchema = new AgentActionSchema(PUTLVRSETPOINTS);
    add(putLvrSetpointsSchema, net.peak.datamodel.communication.PutLvrSetpoints.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    lvrSetpointsSchema.add(LVRSETPOINTS_ALLSTEPUP, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_TOLERANCELOWER, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_L1STEPUP, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_L3STEPUP, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_L2STEPUP, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_ALLSTEPDOWN, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_MODE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_L2STEPDOWN, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_TOLERANCEUPPER, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_L3STEPDOWN, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_IMPEDANCE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_VSETPOINT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_L1STEPDOWN, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    lvrSetpointsSchema.add(LVRSETPOINTS_REACTIONTIME, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_LONGITUDE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    locationSchema.add(LOCATION_LATITUDE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    timeSeriesValueSchema.add(TIMESERIESVALUE_TIMESTAMP, longValueSchema, ObjectSchema.OPTIONAL);
    timeSeriesValueSchema.add(TIMESERIESVALUE_UNITVALUE, unitValueSchema, ObjectSchema.OPTIONAL);
    flexibilityResultSchema.add(FLEXIBILITYRESULT_POWERADJUSTMENTINDIVIDUAL, powerAdjustmentSchema, ObjectSchema.OPTIONAL);
   // energyResultSchema.add(ENERGYRESULT_DELIVEREDENERGY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_MINBIDPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_COUNTERASK, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_SUMBIDAMOUNT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_AVGBIDPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_COUNTERBID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_QUARTERHOURSTATUS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_AVGASKPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_MAXASKPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_CREATEDDATE, longValueSchema, ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_TIMESLOTSTART, longValueSchema, ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_CHANGEDDATE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_SUMASKAMOUNT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    orderBookSchema.add(ORDERBOOK_MINASKPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    activePowerSetpointSinglePhaseAclSchema.add(ACTIVEPOWERSETPOINTSINGLEPHASEACL_TIMESTAMP, longValueSchema, ObjectSchema.OPTIONAL);
    activePowerSetpointSinglePhaseAclSchema.add(ACTIVEPOWERSETPOINTSINGLEPHASEACL_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flexibilityRequestSchema.add(FLEXIBILITYREQUEST_TIMESLOTSTART, longValueSchema, ObjectSchema.OPTIONAL);
    flexibilityRequestSchema.add(FLEXIBILITYREQUEST_POWERADJUSTMENTINDIVIDUAL, powerAdjustmentSchema, ObjectSchema.OPTIONAL);
    gridMarketResultSchema.add(GRIDMARKETRESULT_PURCHASEPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    apparentPowerSetpointTriPhaseAclSchema.add(APPARENTPOWERSETPOINTTRIPHASEACL_TIMESTAMP, longValueSchema, ObjectSchema.OPTIONAL);
    apparentPowerSetpointTriPhaseAclSchema.add(APPARENTPOWERSETPOINTTRIPHASEACL_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    actuatorSetpointSchema.add(ACTUATORSETPOINT_TIMESTAMP, longValueSchema, ObjectSchema.OPTIONAL);
    actuatorSetpointSchema.add(ACTUATORSETPOINT_SETPOINT, powerFlowSchema, ObjectSchema.OPTIONAL);
    energyTransactionSchema.add(PROSUMERMARKETINTERACTION_ENERGYAMOUNTFLOAT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    //residualResultSchema.add(RESIDUALRESULT_DELIVEREDENERGY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridTrafficLightForecastSchema.add(GRIDTRAFFICLIGHTFORECAST_TIMESLOTSTART, longValueSchema, ObjectSchema.OPTIONAL);
    gridMarketInteractionSchema.add(GRIDMARKETINTERACTION_TIMESLOTSTART, longValueSchema, ObjectSchema.OPTIONAL);
    
    gridMarketInteractionSchema.add(GRIDMARKETINTERACTION_POWERADJUSTMENT, powerAdjustmentSchema, 0, ObjectSchema.UNLIMITED);
    
    powerAdjustmentSchema.add(POWERADJUSTMENT_NODEID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    powerAdjustmentSchema.add(POWERADJUSTMENT_ADJUSTMENT, powerFlowSchema, ObjectSchema.OPTIONAL);
    energyLabelSchema.add(ENERGYLABEL_LABEL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    loadbankSetpointsSchema.add(LOADBANKSETPOINTS_SETPOINTP2, activePowerSetpointSinglePhaseAclSchema, ObjectSchema.OPTIONAL);
    loadbankSetpointsSchema.add(LOADBANKSETPOINTS_SETPOINTP3, activePowerSetpointSinglePhaseAclSchema, ObjectSchema.OPTIONAL);
    loadbankSetpointsSchema.add(LOADBANKSETPOINTS_SETPOINTP1, activePowerSetpointSinglePhaseAclSchema, ObjectSchema.OPTIONAL);
    loadbankSetpointsSchema.add(LOADBANKSETPOINTS_UUID, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    forecastScheduleSchema.add(FORECASTSCHEDULE_TIMESERIES, timeSeriesSchema, ObjectSchema.OPTIONAL);
    peakMemberSchema.add(PEAKMEMBER_LOCATION, locationSchema, ObjectSchema.OPTIONAL);
    peakMemberSchema.add(PEAKMEMBER_PEAKAGENTID, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    peakMemberSchema.add(PEAKMEMBER_PEAKMEMBERID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    peakMemberSchema.add(PEAKMEMBER_NODEID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    peakMemberSchema.add(PEAKMEMBER_PEAKUSERID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    peakMemberSchema.add(PEAKMEMBER_GRIDID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    longValueSchema.add(LONGVALUE_LONGASSTRING, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    actuatorFeedbackSchema.add(ACTUATORFEEDBACK_MAXACTIVEPOWERFEEDIN, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    actuatorFeedbackSchema.add(ACTUATORFEEDBACK_TIMESTAMP, longValueSchema, ObjectSchema.OPTIONAL);
    actuatorFeedbackSchema.add(ACTUATORFEEDBACK_MAXACTIVEPOWERDEMAND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    actuatorFeedbackSchema.add(ACTUATORFEEDBACK_REPORTEDACTIVEPOWER, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    actuatorFeedbackSchema.add(ACTUATORFEEDBACK_REPORTEDSETPOINT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    unitValueSchema.add(UNITVALUE_UNIT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    unitValueSchema.add(UNITVALUEFLOAT_FLOATVALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    powerFactorSetpointTriPhaseAclSchema.add(POWERFACTORSETPOINTTRIPHASEACL_TIMESTAMP, longValueSchema, ObjectSchema.OPTIONAL);
    powerFactorSetpointTriPhaseAclSchema.add(POWERFACTORSETPOINTTRIPHASEACL_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    inverterSetpointsSchema.add(INVERTERSETPOINTS_SETPOINTPF123, powerFactorSetpointTriPhaseAclSchema, ObjectSchema.OPTIONAL);
    inverterSetpointsSchema.add(INVERTERSETPOINTS_SETPOINTS123, apparentPowerSetpointTriPhaseAclSchema, ObjectSchema.OPTIONAL);
    inverterSetpointsSchema.add(INVERTERSETPOINTS_UUID, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    orderBookRequestSchema.add(ORDERBOOKREQUEST_TIMESLOTSTART, longValueSchema, ObjectSchema.OPTIONAL);
    flexibilityTransactionSchema.add(FLEXIBILITYTRANSACTION_POWERFLOW, powerFlowSchema, ObjectSchema.OPTIONAL);
    flexibilityTransactionSchema.add(FLEXIBILITYTRANSACTION_CALCULATIONCOMPLETE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    unitValueFloatSchema.add(UNITVALUEFLOAT_FLOATVALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    unitValueIntegerSchema.add(UNITVALUEINTEGER_INTVALUE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_TIMESLOTSTART, longValueSchema, ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_LOCALTRANSACTIONID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_PEAKMEMBERID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_TRANSACTIONPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(ASKINGAGENT, (TermSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(OFFERINGAGENT, (TermSchema)getSchema(BasicOntology.AID), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_INITIALENERGYAMOUNTOFFERED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_INITIALENERGYAMOUNTASKED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_INITIALTRANSACTIONPRICEOFFERED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_INITIALTRANSACTIONPRICEOFFERED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_TRADETYPESTRING, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_ENERGYAMOUNTFLOAT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_ITERATION, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    energyResultSchema.add(AGENTASKEDENERGY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    energyResultSchema.add(AGENTOFFEREDENERGY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    energyResultSchema.add(ENERGYRESULT_ENERGYAMOUNTASKED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    energyResultSchema.add(ENERGYRESULT_DELIVEREDENERGY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    energyResultSchema.add(ENERGYRESULT_ENERGYPRICEMATCHED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    energyResultSchema.add(ENERGYRESULT_INITALTRANSACTIONPRICEASKED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    energyResultSchema.add(ENERGYRESULT_ACTUALPERIOD, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    energyResultSchema.add(ENERGYRESULT_ACTUALTRADINGCYCLE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    energyResultSchema.add(ENERGYRESULT_OPENENERGYAMOUNTASKED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    energyResultSchema.add(ENERGYRESULT_OPENENERGYAMOUNTOFFER, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    
    
    //energyTransactionSchema.add(PROSUMERMARKETINTERACTION_LISTHISTORICALTRADES,(TermSchema)getSchema(BasicOntology.CONTENT_ELEMENT_LIST),ObjectSchema.OPTIONAL);
    
    //prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_LISTHISTORICALTRADES, energyTransactionSchema, 0, ObjectSchema.UNLIMITED);
   // prosumerMarketInteractionSchema.add(PROSUMERMARKETINTERACTION_ENERGYTRANSACTION, energyTransactionSchema, 0, ObjectSchema.UNLIMITED);
    
    timeSeriesSchema.add(TIMESERIES_TIMESERIESVALUELIST, timeSeriesValueSchema, 0, ObjectSchema.UNLIMITED);
    prosumerMarketTransactionSchema.add(PROSUMERMARKETTRANSACTION_ENERGYLABEL, energyLabelSchema, ObjectSchema.OPTIONAL);
    gridMarketRequestSchema.add(GRIDMARKETREQUEST_MAXIMUMPURCHASEPRICE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    gridPlatformInteractionSchema.add(GRIDPLATFORMINTERACTION_TRAFFICLIGHT, trafficLightSchema, ObjectSchema.OPTIONAL);
    trafficLightSchema.add(TRAFFICLIGHT_COLOR, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    matlabApiConfigurationSchema.add(MATLABAPICONFIGURATION_GRIDSTATEFORECASTSERVERURL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    matlabApiConfigurationSchema.add(MATLABAPICONFIGURATION_UPDATEPOWERFORECASTSERVERURL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    getOrderBookRequestSchema.add(GETORDERBOOKREQUEST_ORDERBOOKREQUEST, orderBookRequestSchema, ObjectSchema.OPTIONAL);
    putOrderBookSchema.add(PUTORDERBOOK_ORDERBOOK, orderBookSchema, ObjectSchema.OPTIONAL);
    putEnergyTransactionSchema.add(PUTENERGYTRANSACTION_ENERGYTRANSACTION, energyTransactionSchema, ObjectSchema.OPTIONAL);
    //putEnergyTransactionSchema.add(PROSUMERMARKETINTERACTION_ENERGYTRANSACTION, energyTransactionSchema, 0, ObjectSchema.UNLIMITED);
    putFlexibilityTransactionSchema.add(PUTFLEXIBILITYTRANSACTION_FLEXIBILITYTRANSACTION, flexibilityTransactionSchema, ObjectSchema.OPTIONAL);
    putFlexibilityRequestSchema.add(PUTFLEXIBILITYREQUEST_FLEXIBILITYREQUEST, flexibilityRequestSchema, ObjectSchema.OPTIONAL);
    putFlexibilityResultSchema.add(PUTFLEXIBILITYRESULT_FLEXIBILITYRESULT, flexibilityResultSchema, ObjectSchema.OPTIONAL);
    putEnergyResultSchema.add(PUTENERGYRESULT_ENERGYRESULT, energyResultSchema, ObjectSchema.OPTIONAL);
    putResidualProcurementResultSchema.add(PUTRESIDUALPROCUREMENTRESULT_RESIDUALRESULT, residualResultSchema, ObjectSchema.OPTIONAL);
    putFlexibilityTableRequestSchema.add(PUTFLEXIBILITYTABLEREQUEST_GRIDMARKETREQUEST, gridMarketInteractionSchema, ObjectSchema.OPTIONAL);
    putMarketResultSchema.add(PUTMARKETRESULT_GRIDMARKETRESULT, gridMarketResultSchema, ObjectSchema.OPTIONAL);
    putTrafficLightRealTimeMarketSchema.add(PUTTRAFFICLIGHTREALTIMEMARKET_GRIDTRAFFICLIGHTREALTIME, gridTrafficLightRealTimeSchema, ObjectSchema.OPTIONAL);
    putTrafficLightForecastMarketSchema.add(PUTTRAFFICLIGHTFORECASTMARKET_GRIDTRAFFICLIGHTFORECAST, gridTrafficLightForecastSchema, ObjectSchema.OPTIONAL);
    peakMemberRegistrationSchema.add(PEAKMEMBERREGISTRATION_PEAKMEMBER, peakMemberSchema, ObjectSchema.OPTIONAL);
    peakMemberAnswerSchema.add(PEAKMEMBERANSWER_FORECASTSCHEDULE, forecastScheduleSchema, ObjectSchema.OPTIONAL);
    peakMemberRequestSchema.add(PEAKMEMBERREQUEST_FORECASTSCHEDULE, forecastScheduleSchema, ObjectSchema.OPTIONAL);
    putForecastScheduleSchema.add(PUTFORECASTSCHEDULE_FORECASTSCHEDULETABLE, forecastScheduleSchema, 0, ObjectSchema.UNLIMITED);
    putTrafficLightRealTimePlatformSchema.add(PUTTRAFFICLIGHTREALTIMEPLATFORM_GRIDTRAFFICLIGHTREALTIME, gridTrafficLightRealTimeSchema, ObjectSchema.OPTIONAL);
    putTrafficLightForecastPlatformSchema.add(PUTTRAFFICLIGHTFORECASTPLATFORM_GRIDTRAFFICLIGHTFORECAST, gridTrafficLightForecastSchema, ObjectSchema.OPTIONAL);
    putActuatorFeedbackSchema.add(PUTACTUATORFEEDBACK_ACTUATORFEEDBACK, actuatorFeedbackSchema, ObjectSchema.OPTIONAL);
    putActuatorSetpointSchema.add(PUTACTUATORSETPOINT_ACTUATORSETPOINT, actuatorSetpointSchema, ObjectSchema.OPTIONAL);
    putInverterSetpointsSchema.add(PUTINVERTERSETPOINTS_INVERTERSETPOINTS, inverterSetpointsSchema, ObjectSchema.OPTIONAL);
    putLoadbankSetpointsSchema.add(PUTLOADBANKSETPOINTS_LOADBANKSETPOINTS, loadbankSetpointsSchema, ObjectSchema.OPTIONAL);
    putAllHardwareSetpointsSchema.add(PUTALLHARDWARESETPOINTS_INVERTERSETPOINTSLIST, inverterSetpointsSchema, 0, ObjectSchema.UNLIMITED);
    putAllHardwareSetpointsSchema.add(PUTALLHARDWARESETPOINTS_LOADBANKSETPOINTSLIST, loadbankSetpointsSchema, 0, ObjectSchema.UNLIMITED);
    putLvrSetpointsSchema.add(PUTLVRSETPOINTS_LVRSETPOINTS, lvrSetpointsSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance
    lvrSetpointsSchema.addSuperSchema(plattformSglInteractionSchema);
    flexibilityResultSchema.addSuperSchema(marketProsumerResultSchema);
    energyResultSchema.addSuperSchema(marketProsumerResultSchema);
    gridMarketResultSchema.addSuperSchema(gridMarketInteractionSchema);
    energyTransactionSchema.addSuperSchema(prosumerMarketTransactionSchema);
    powerFlowSchema.addSuperSchema(unitValueFloatSchema);
    residualResultSchema.addSuperSchema(marketProsumerResultSchema);
    gridTrafficLightForecastSchema.addSuperSchema(gridPlatformInteractionSchema);
    gridTrafficLightRealTimeSchema.addSuperSchema(gridPlatformInteractionSchema);
    loadbankSetpointsSchema.addSuperSchema(plattformSglInteractionSchema);
    inverterSetpointsSchema.addSuperSchema(plattformSglInteractionSchema);
    flexibilityTransactionSchema.addSuperSchema(prosumerMarketTransactionSchema);
    energyAmountSchema.addSuperSchema(unitValueFloatSchema);
    timeSeriesValueFloatSchema.addSuperSchema(timeSeriesValueSchema);
    unitValueFloatSchema.addSuperSchema(unitValueSchema);
    timeSeriesIntegerSchema.addSuperSchema(timeSeriesValueSchema);
    unitValueIntegerSchema.addSuperSchema(unitValueSchema);
    prosumerMarketTransactionSchema.addSuperSchema(prosumerMarketInteractionSchema);
    marketProsumerResultSchema.addSuperSchema(prosumerMarketInteractionSchema);
    gridMarketRequestSchema.addSuperSchema(gridMarketInteractionSchema);
    getOrderBookRequestSchema.addSuperSchema(prosumerToMarketSchema);
    putOrderBookSchema.addSuperSchema(prosumerToMarketSchema);
    putTradingTransactionSchema.addSuperSchema(prosumerToMarketSchema);
    putEnergyTransactionSchema.addSuperSchema(putTradingTransactionSchema);
    putFlexibilityTransactionSchema.addSuperSchema(putTradingTransactionSchema);
    putFlexibilityRequestSchema.addSuperSchema(putTradingTransactionSchema);
    putTradingResultSchema.addSuperSchema(prosumerToMarketSchema);
    putFlexibilityResultSchema.addSuperSchema(putTradingResultSchema);
    putEnergyResultSchema.addSuperSchema(putTradingResultSchema);
    putResidualProcurementResultSchema.addSuperSchema(putTradingResultSchema);
    putFlexibilityTableRequestSchema.addSuperSchema(gridToMarketSchema);
    putMarketResultSchema.addSuperSchema(gridToMarketSchema);
    putTrafficLightRealTimeMarketSchema.addSuperSchema(gridToMarketSchema);
    putTrafficLightForecastMarketSchema.addSuperSchema(gridToMarketSchema);
    peakMemberInteractionSchema.addSuperSchema(peakPlatformInteractionSchema);
    peakMemberRegistrationSchema.addSuperSchema(peakMemberInteractionSchema);
    peakMemberAnswerSchema.addSuperSchema(peakMemberInteractionSchema);
    peakMemberRequestSchema.addSuperSchema(peakMemberInteractionSchema);
    putForecastScheduleSchema.addSuperSchema(gridToPlatformSchema);
    putTrafficLightRealTimePlatformSchema.addSuperSchema(gridToPlatformSchema);
    putTrafficLightForecastPlatformSchema.addSuperSchema(gridToPlatformSchema);
    putActuatorFeedbackSchema.addSuperSchema(gridToProsumerSchema);
    putActuatorSetpointSchema.addSuperSchema(gridToProsumerSchema);
    putInverterSetpointsSchema.addSuperSchema(plattformToSglSchema);
    putLoadbankSetpointsSchema.addSuperSchema(plattformToSglSchema);
    putAllHardwareSetpointsSchema.addSuperSchema(plattformToSglSchema);
    putLvrSetpointsSchema.addSuperSchema(plattformToSglSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
